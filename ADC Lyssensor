// --------------------------------------- //
// ---------- ADC_Lightsensor() ---------- //
// --------------------------------------- //
// ------- Ferdig Kommentert kode -------- //
// --------------------------------------- //


// ---------------------------- //
// ----------- Inits ---------- //
// ---------------------------- //
#include <avr/io.h>
#define F_CPU 16e6


// ---------------------------- //
// --------- Globals ---------- //
// ---------------------------- //
// Ingen i denne Funksjonen
// Setter en Pin High/Low i stedet


int main (void) {
// ---------------------------- //
// ------- Inits main() ------- //	
// ---------------------------- //
// Stuff

// ---------------------------- //	
// -------- Event loop -------- //
// ---------------------------- //
	do {
		// Stuff
		// Kall Funksjonen ADC_Lightsensor
		ADC_Lightsensor();
	} while (1); // End event loop
	return (0); // This line is never reached
}


// ---------------------------- //
// Funksjonen ADC_Lightsensor() //
// ---------------------------- //
// void
void ADC_Lightsensor (void) {
// ---------------------------- //	
// ---------- Inits ----------- //
// ---------------------------- //	
	// Enable ADC and ADPS2/1/0
	// ADPS2/1/0 gives division factor 128 resulting in 125kHz
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
	
	// Set AVCC as ref with ADLAR 1 and ADC0 SE input
	// PIN 0-3 bestemmer PIN read
	// ADC_Lightsensor() bruker adc2: 0b01100010
	#define ADMUX_ADC2 0b01100010
	ADMUX = ADMUX_ADC2;


// ---------------------------- //
// -------- Variabler --------- //
// ---------------------------- //
	// Grenseverdi for Dag/Natt
	// 500 var mørkt rom når solen gikk ned
	const uint16_t ADC_Threshold_Value = 500;
	uint16_t ADC_Current_Value;
	
	// State-maskin
	uint8_t Light_Current_State;
	// Starter ved å anta at det er dag, siden da gjør den ingen ting
	uint8_t Light_Previous_State = 1;
		
	// LED nattlys, for å se panelet
	// Varmer ekstra om natten
	// Setter pins til output
	#define Night_Light PD4
	#define Night_Varmth PD5
	DDRD |= (1 << Night_Light) | (1 << Night_Varmth);	// Data Direction Register D: writing a one to the bit enables output


// ---------------------------- //	
// ------ Funksjons Kode ------ //
// ---------------------------- //	
	// ADC: Leser fra ADC
	ADCSRA |= (1 << ADSC); // Start ADC conversion
	loop_until_bit_is_clear(ADCSRA, ADSC); // Wait until done
	ADC_Current_Value = ADC; // Read ADC in
	
	
	// Tester først ADC_Current_Value mot ADC_Threshold_Value
	if (ADC_Current_Value > ADC_Threshold_Value) {
		// Dag
		Light_Current_State = 1;
	}
	else {
		// Natt
		Light_Current_State = 0;
	}
	// Ser om ADC_Current_Value er endret siden sist
	// Light_Previous_State starter opp som dag
	if (Light_Current_State != Light_Previous_State) {
		// Dag
		if (Light_Current_State == 1) {
			// Slår av nattlys og varme
			PORTB = (0 << Night_Light) | (0 << Night_Varmth);
		}
		// Natt
		else {
			// Slår på nattlys og varme
			PORTB = (1 << Night_Light) | (1 << Night_Varmth);
		}
		// Setter previous state
		Light_Previous_State = Light_Current_State;
	}
} // Slutten på Funksjonen: ADC_Lightsensor
